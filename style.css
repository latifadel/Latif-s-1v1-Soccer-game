/****************************************************************************
 * style.css
 *
 * This file is intentionally filled with a large amount of CSS code,
 * comments, transitions, keyframes, and advanced styling to fulfill
 * the request for a big, polished design. 
 *
 * TABLE OF CONTENTS:
 *  1) Global Resets and Base
 *  2) Body and Root Containers
 *  3) Canvas Layout and Styling
 *  4) Overlays, Menus, and UI Components
 *  5) Touch Controls
 *  6) Animations & Transitions
 *  7) Responsive Queries
 ****************************************************************************/

/* 1) GLOBAL RESETS AND BASE */
*,
*::before,
*::after {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

/* Disable text selection and context menus for a more "app-like" experience */
body {
  -webkit-user-select: none;
  -ms-user-select: none;
  user-select: none;
  background-color: #222; /* fallback background color */
  font-family: "Open Sans", "Helvetica Neue", Arial, sans-serif;
  color: #fff;
}

/* 2) BODY AND ROOT CONTAINERS */
#game-root {
  position: relative;
  width: 100vw;
  height: 100vh;
  overflow: hidden;
}

/* 3) CANVAS LAYOUT AND STYLING */

/* 
  The container for the canvas. We'll give it a striped grass background
  that shows up behind the actual canvas or around any letterboxing areas.
*/
#canvas-container {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;

  /* Striped grass pattern using multiple linear-gradients */
  background-color: #0b3d0b; /* fallback green */
  background-image: 
    linear-gradient(90deg, rgba(0,0,0,0.05) 50%, transparent 50%), 
    linear-gradient(90deg, rgba(255,255,255,0.02) 50%, transparent 50%);
  background-size: 40px 40px, 20px 20px; /* wide stripes, narrow stripes */
  background-repeat: repeat;
  display: flex;
  justify-content: center;
  align-items: center;
}

/* 
  The canvas itself. We'll rely on JS to dynamically resize it while 
  maintaining aspect ratio, but we can style the default dimension for fallback.
*/
#gameCanvas {
  border: 2px solid #444;
  box-shadow: 0 0 30px rgba(0,0,0,0.7);
  display: block;
  background-color: transparent; /* canvas is drawn upon directly */
  transition: all 0.5s ease;
}

/* 4) OVERLAYS, MENUS, AND UI COMPONENTS */

/* 
  We'll create in-canvas or overlay elements with absolute positioning if needed.
  The actual text overlays are drawn in script.js on the canvas. 
  If we want an HTML-based overlay (like a "Pause Menu"), we could do it here.
*/

/* Example: we can style an invisible overlay used for menus or game-over states */
.overlay-menu {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(30, 30, 30, 0.8);
  backdrop-filter: blur(4px);
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  z-index: 9999;
  opacity: 0;
  visibility: hidden;
  transition: all 0.4s ease;
}

/* Shown state for the overlay */
.overlay-menu.show {
  opacity: 1;
  visibility: visible;
}

/* Big menu title text */
.overlay-menu .menu-title {
  font-size: 3rem;
  text-shadow: 2px 2px 8px rgba(0,0,0,0.7);
  margin-bottom: 2rem;
}

/* Subtext instructions */
.overlay-menu .menu-subtitle {
  font-size: 1.5rem;
  margin-bottom: 2rem;
}

/* Buttons inside the menu */
.overlay-menu .menu-button {
  background-color: #fff;
  color: #222;
  border: none;
  border-radius: 8px;
  font-size: 1.2rem;
  font-weight: bold;
  padding: 1rem 2rem;
  margin: 0.5rem;
  cursor: pointer;
  box-shadow: 0 4px 0 #bbb;
  transition: transform 0.2s ease, background-color 0.2s ease;
}

.overlay-menu .menu-button:hover {
  background-color: #eee;
}

.overlay-menu .menu-button:active {
  transform: translateY(2px);
  box-shadow: 0 2px 0 #bbb;
}

/* 5) TOUCH CONTROLS */
#touch-controls {
  position: absolute;
  bottom: 8%;
  width: 100%;
  display: flex;
  justify-content: space-evenly;
  align-items: center;
  flex-wrap: wrap;
  pointer-events: none; /* We'll enable pointer events only for actual buttons */
  z-index: 2000;
}

.touch-btn {
  pointer-events: auto;
  width: 60px;
  height: 60px;
  margin: 8px;
  background: rgba(255,255,255,0.1);
  border: 2px solid rgba(255,255,255,0.4);
  border-radius: 50%;
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 28px;
  color: #fff;
  cursor: pointer;
  transition: all 0.3s ease;
}

.touch-btn:hover {
  background: rgba(255,255,255,0.2);
}

.touch-btn:active {
  background: rgba(255,255,255,0.3);
  transform: scale(0.95);
}

.hidden {
  display: none !important;
}

/* 6) ANIMATIONS & TRANSITIONS */

/* Example keyframes for a subtle "bounce" effect on a menu button or ball. */
@keyframes bounce {
  0%, 20%, 60%, 100% {
    transform: translateY(0);
  }
  40% {
    transform: translateY(-15px);
  }
  80% {
    transform: translateY(-8px);
  }
}

/* If we want to apply bounce to the ball, or a highlight effect, we might do: */
.bouncy {
  animation: bounce 1.5s infinite;
}

/* 7) RESPONSIVE QUERIES */
@media screen and (max-width: 768px) {
  .touch-btn {
    width: 50px;
    height: 50px;
    font-size: 24px;
  }
  .overlay-menu .menu-title {
    font-size: 2rem;
  }
  .overlay-menu .menu-subtitle {
    font-size: 1.2rem;
  }
  .overlay-menu .menu-button {
    font-size: 1rem;
    padding: 0.8rem 1.5rem;
  }
}

@media screen and (max-width: 480px) {
  .touch-btn {
    width: 40px;
    height: 40px;
    font-size: 20px;
  }
  .overlay-menu .menu-title {
    font-size: 1.5rem;
  }
  .overlay-menu .menu-subtitle {
    font-size: 1rem;
  }
  .overlay-menu .menu-button {
    font-size: 0.9rem;
    padding: 0.5rem 1rem;
  }
}
